# -*- coding: utf-8 -*-
"""Escalation A1-mation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kTpZrMNk6DBJHeNWf-6vhhc2L-wABl2I
"""

!pip install streamlit

import pandas as pd
from datetime import datetime
from tkinter import Tk
from tkinter.filedialog import askopenfilename
from openpyxl import Workbook
from openpyxl.styles import PatternFill, Font, Alignment
from openpyxl.worksheet.datavalidation import DataValidation
from io import BytesIO
import google.colab
import streamlit as st

# Request file upload from the user
uploaded = google.colab.files.upload()

# Get the uploaded file's name and content
file_name = list(uploaded.keys())[0]
file_content = uploaded[file_name]

# Create a BytesIO object to treat the file content as a file-like object
file_stream = BytesIO(file_content)

# Read the Excel file into a pandas DataFrame
df = pd.read_excel(file_stream)

# Filter only rows where Task Status is 'Processing'
df = df[df['task_status'].str.strip().str.lower() == 'processing']

# Step 3: Create Excel workbook
wb = openpyxl.Workbook()
del wb[wb.sheetnames[0]]  # Remove default sheet

# Dropdown options
status_options = [
    "Come on Saturday", "Stay late", "Come Early", "Task reassigned", "rejected",
    "Inprocess", "Convert to workflow", "On hold (Specific Reason)", "Completed",
    "Pending", "QC (Specific Reason)", "Other (specific reason)", "Decision pending",
    "Cascading Task", "Escalated", "Workflow"
]

reason_options = [
    "none", "Employee > can't complete this task as the task communication is not ended",
    "Employee > come Early", "Employ > Come Saturday",
    "Employee > I have completed this task & pending from other task member",
    "Employee > I have completed this task & pending from the task assigner",
    "Employee > Salary Deduction", "Employee > Stay Late",
    "Management > I have completed this task & it's pending from other task member who is in the management",
    "Management > I have completed this task and it's pending from other task member who is in no longer in the company",
    "Management > I completed this task & it's pending from task assigner who is in the management",
    "Management > task waiting for a client approval", "QC (Specify Reason", "On hold(Specific Reason)",
    "Other (Specify Reason)", "Adhoc task"
]

# Priority colors
priority_colors = {
    "High": PatternFill(start_color="FFFACD", end_color="FFFACD", fill_type="solid"),    # Light Yellow 3
    "Urgent": PatternFill(start_color="FFCCCB", end_color="FFCCCB", fill_type="solid"),  # Light Red 1
    "SOS": PatternFill(start_color="FFA07A", end_color="FFA07A", fill_type="solid"),     # Light Red 3
    "Normal": PatternFill(start_color="90EE90", end_color="90EE90", fill_type="solid")   # Light Green 2
}

# Header style
header_fill = PatternFill(start_color="000000", end_color="000000", fill_type="solid")
header_font = Font(color="FFFFFF", bold=True)
align_center = Alignment(horizontal='center', vertical='center')
date_format = 'DD-MMM-YYYY'

# Create individual sheets
for assignee in df['task_assignee'].unique():
    user_df = df[df['task_assignee'] == assignee]
    sheet = wb.create_sheet(title=assignee[:31])

    headers = ["Sr No", "Week", "Meeting Date", "Task Id", "Task Title", "Task Priority",
               "Task Status", "Actual Start Date", "Assign Date", "Due Date",
               "Actual End Date", "Reason", "Status", "Discussion Point"]
    sheet.append(headers)

    # Apply header style
    for col_num, _ in enumerate(headers, 1):
        cell = sheet.cell(row=1, column=col_num)
        cell.fill = header_fill
        cell.font = header_font
        cell.alignment = align_center

    for row_idx, (_, row) in enumerate(user_df.iterrows(), start=2):
        sheet.append([
            row_idx - 1, "", "", row['master_task_id'], row['master_task_title'],
            row.get('task_priority', ""), row['task_status'],
            row['master_task_update_date'], row['master_task_start_date'],
            row['master_task_tentative_end_date'], row['master_task_actual_end_date'],
            "", "", ""
        ])

    max_row = sheet.max_row

    # Add dropdowns
    reason_dv = DataValidation(type="list", formula1='"' + ','.join(reason_options) + '"', allow_blank=True)
    status_dv = DataValidation(type="list", formula1='"' + ','.join(status_options) + '"', allow_blank=True)
    sheet.add_data_validation(reason_dv)
    sheet.add_data_validation(status_dv)

    for row in range(2, max_row + 1):
        reason_dv.add(sheet[f'L{row}'])  # Reason
        status_dv.add(sheet[f'M{row}'])  # Status

        # Apply alignment to all columns
        for col in range(1, 15):
            sheet.cell(row=row, column=col).alignment = align_center

        # Format dates in H, I, J columns (Actual Start Date, Assign Date, Due Date)
        for col_letter in ['H', 'I', 'J']:
            cell = sheet[f'{col_letter}{row}']
            if cell.value:
                try:
                    cell.value = pd.to_datetime(cell.value).date()
                    cell.number_format = date_format
                except:
                    pass

        # Conditional fill for Task Priority (Column F)
        cell = sheet[f'F{row}']
        value = str(cell.value).strip()
        if value in priority_colors:
            cell.fill = priority_colors[value]
            cell.font = Font(color="000000")

    # Auto-adjust column width
    for col in sheet.columns:
        max_length = 0
        column = col[0].column_letter
        for cell in col:
            try:
                if cell.value:
                    max_length = max(max_length, len(str(cell.value)))
            except:
                pass
        adjusted_width = (max_length + 2)
        sheet.column_dimensions[column].width = adjusted_width

# ---------------- Step 6: Save the Final Excel File ----------------
now = datetime.now()
month_year = now.strftime("%B_%Y")
file_name = f"Task_Report_Escalation_Live_{month_year}.xlsx"
wb.save(file_name)

print(f"âœ… Report generated and saved as: {file_name}")

